package gelm_test

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/yitsushi/gelm"
)

// Lazy testing, sorry.
const expectedOutput = `-- This file was generated with github.com/yitsushi/gelm
-- Do not edit this file unless you know what you are doing.


module Models.Fancy exposing (..)

import Json.Decode as Decode
import Json.Decode.Pipeline as Dp


type alias MyData =
    { name : String
    , value : Int
    , flag : Bool
    , dataSet : List Int
    , sub : SubData
    , subs : List SubData
    }


type alias SubData =
    { name : String
    }


decodeMyData : Decode.Decoder MyData
decodeMyData =
    Decode.succeed MyData
        |> Dp.required "Name" Decode.string
        |> Dp.required "Value" Decode.int
        |> Dp.optional "Flag" Decode.bool True
        |> Dp.required "DataSet" (Decode.list Decode.int)
        |> Dp.required "Sub" (Decode.lazy (\_ -> decodeSubData))
        |> Dp.required "SubList" (Decode.list (Decode.lazy (\_ -> decodeSubData)))


decodeSubData : Decode.Decoder SubData
decodeSubData =
    Decode.succeed SubData
        |> Dp.required "Name" Decode.string
`

type MyData struct {
	Name    string    `elm:"name"`
	Value   int64     `elm:"value"`
	Flag    bool      `elm:"flag,optional=True"`
	DataSet []int64   `elm:"dataSet"`
	Sub     SubData   `elm:"sub"`
	SubList []SubData `elm:"subs"`
}

type SubData struct {
	Name string `elm:"name"`
}

func TestGenerate(t *testing.T) {
	output := gelm.Generate("Models.Fancy", MyData{}, SubData{})

	assert.Equal(t, expectedOutput, string(output))
}

func ExampleGenerate() {
	output := gelm.Generate("Models.Fancy", MyData{}, SubData{})

	fmt.Printf("%s", output)
}
